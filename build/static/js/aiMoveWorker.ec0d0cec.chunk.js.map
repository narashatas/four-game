{"version":3,"file":"static/js/aiMoveWorker.ec0d0cec.chunk.js","mappings":"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","sources":["../node_modules/comlink/src/comlink.ts","helpers/helpers.ts","helpers/boardScore.ts","helpers/findRowToLandCounter.ts","helpers/aiMove.ts","helpers/worker.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport type { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\nexport const finalizer = Symbol(\"Comlink.finalizer\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nfunction isAllowedOrigin(\n  allowedOrigins: (string | RegExp)[],\n  origin: string\n): boolean {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function expose(\n  obj: any,\n  ep: Endpoint = globalThis as any,\n  allowedOrigins: (string | RegExp)[] = [\"*\"]\n) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n          if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n            obj[finalizer]();\n          }\n        }\n      })\n      .catch((error) => {\n        // Send Serialization Error To Caller\n        const [wireValue, transferables] = toWireValue({\n          value: new TypeError(\"Unserializable return value\"),\n          [throwMarker]: 0,\n        });\n        ep.postMessage({ ...wireValue, id }, transferables);\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction releaseEndpoint(ep: Endpoint) {\n  return requestResponseMessage(ep, {\n    type: MessageType.RELEASE,\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\n\ninterface FinalizationRegistry<T> {\n  new (cb: (heldValue: T) => void): FinalizationRegistry<T>;\n  register(\n    weakItem: object,\n    heldValue: T,\n    unregisterToken?: object | undefined\n  ): void;\n  unregister(unregisterToken: object): void;\n}\ndeclare var FinalizationRegistry: FinalizationRegistry<Endpoint>;\n\nconst proxyCounter = new WeakMap<Endpoint, number>();\nconst proxyFinalizers =\n  \"FinalizationRegistry\" in globalThis &&\n  new FinalizationRegistry((ep: Endpoint) => {\n    const newCount = (proxyCounter.get(ep) || 0) - 1;\n    proxyCounter.set(ep, newCount);\n    if (newCount === 0) {\n      releaseEndpoint(ep);\n    }\n  });\n\nfunction registerProxy(proxy: object, ep: Endpoint) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\n\nfunction unregisterProxy(proxy: object) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  registerProxy(proxy, ep);\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T extends {}>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = globalThis,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","export type counter = string | null;\n\nexport const getCounter = (\n  row: number,\n  col: number,\n  gameGrid: counter[][]\n): counter => {\n  if (!gameGrid[row] || !gameGrid[row][col]) return null;\n  return gameGrid[row][col];\n};\n\nexport const copyBoard = (gameGrid: counter[][]) => {\n  const copyBoard = gameGrid.map((row) => [...row]);\n  return copyBoard;\n};\n\nexport const boardIsFull = (gameGrid: counter[][]) => {\n  for (let i = 0; i < 7; i++) {\n    if (!gameGrid[0][i]) return false;\n  }\n  return true;\n};\n\nexport const createGrid = () => {\n  const grid: counter[][] = [...Array(6)].map(() => Array(7).fill(null));\n\n  return grid;\n};\n","import { counter } from './helpers';\n\nexport const scorePosition = (\n  row: number,\n  column: number,\n  deltaY: number,\n  deltaX: number,\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let playerPoints = 0;\n  let CPUPoints = 0;\n\n  // Determine score through amount of available counters\n\n  for (let i = 0; i < 4; i++) {\n    if (gameGrid[row][column] === 'red') {\n      // Add for each human counter\n      playerPoints++;\n    } else if (gameGrid[row][column] === 'yellow') {\n      // Add for each cpu counter\n      CPUPoints++;\n    }\n\n    // Moving through our board\n    row += deltaY;\n    column += deltaX;\n  }\n\n  // Marking winning/returning score\n  if (playerPoints === 4) {\n    // Computer won (Infiniry)\n    return -gameScore;\n  } else if (CPUPoints === 4) {\n    // Human won (-Infiniry)\n    return gameScore;\n  } else {\n    // Return normal points\n    return CPUPoints;\n  }\n};\n\nexport const boardScore = (\n  gameGrid: counter[][],\n  gameScore: number\n): number => {\n  let gameRows = 6;\n  let gameColumns = 7;\n\n  let points = 0;\n\n  let verticalPoints = 0;\n  let horizontalPoints = 0;\n  let diagonalPoints1 = 0;\n  let diagonalPoints2 = 0;\n\n  // Board-size: 7x6 (height x width)\n  // Array indices begin with 0\n  // => e.g. height: 0, 1, 2, 3, 4, 5\n\n  // Vertical points\n  // Check each column for vertical score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [x][x][ ][ ][ ][ ][ ] 1\n  // [x][x][x][ ][ ][ ][ ] 2\n  // [x][x][x][ ][ ][ ][ ] 3\n  // [ ][x][x][ ][ ][ ][ ] 4\n  // [ ][ ][x][ ][ ][ ][ ] 5\n\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 0, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      verticalPoints += score;\n    }\n  }\n\n  // Horizontal points\n  // Check each row's score\n  //\n  // Possible situations\n  //  0  1  2  3  4  5  6\n  // [x][x][x][x][ ][ ][ ] 0\n  // [ ][x][x][x][x][ ][ ] 1\n  // [ ][ ][x][x][x][x][ ] 2\n  // [ ][ ][ ][x][x][x][x] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows; row++) {\n    //  Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 0, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      horizontalPoints += score;\n    }\n  }\n\n  // Diagonal points 1 (left-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [x][ ][ ][ ][ ][ ][ ] 0\n  // [ ][x][ ][ ][ ][ ][ ] 1\n  // [ ][ ][x][ ][ ][ ][ ] 2\n  // [ ][ ][ ][x][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (let row = 0; row < gameRows - 3; row++) {\n    // Check for each column\n    for (let column = 0; column < gameColumns - 3; column++) {\n      // Rate the column and add to the points\n      let score = scorePosition(row, column, 1, 1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints1 += score;\n    }\n  }\n\n  // Diagonal points 2 (right-bottom)\n  //\n  // Possible situation\n  //  0  1  2  3  4  5  6\n  // [ ][ ][ ][x][ ][ ][ ] 0\n  // [ ][ ][x][ ][ ][ ][ ] 1\n  // [ ][x][ ][ ][ ][ ][ ] 2\n  // [x][ ][ ][ ][ ][ ][ ] 3\n  // [ ][ ][ ][ ][ ][ ][ ] 4\n  // [ ][ ][ ][ ][ ][ ][ ] 5\n  for (var row = 3; row < gameRows; row++) {\n    // Check for each column\n    for (var column = 0; column <= gameColumns - 4; column++) {\n      // Rate the column and add to the points\n      var score = scorePosition(row, column, -1, +1, gameGrid, gameScore);\n      if (score === gameScore) return gameScore;\n      if (score === -gameScore) return -gameScore;\n      diagonalPoints2 += score;\n    }\n  }\n\n  points =\n    horizontalPoints + verticalPoints + diagonalPoints1 + diagonalPoints2;\n\n  return points;\n};\n","import { counter } from './helpers';\n\nexport const findRowToLandCounter = (\n  grid: counter[][],\n  column: number\n): number => {\n  let row: number = 0;\n  // from top to bottom we search for occupied cell\n  while (row < 5 && !grid[row + 1][column]) {\n    row++;\n  }\n\n  return row;\n};\n","import { counter } from './helpers';\nimport { copyBoard } from './helpers';\nimport { boardScore } from './boardScore';\nimport { findRowToLandCounter } from './findRowToLandCounter';\nimport { boardIsFull } from './helpers';\n\nexport function maximizePlay(\n  gameGrid: counter[][],\n  depth: number,\n  gameScore: number,\n  alpha?: number,\n  beta?: number\n): [null | number, number] {\n  let gameColumns = 7;\n  //  check current board score for cpu\n  const score = boardScore(gameGrid, gameScore);\n  // stop calculation if\n  // -we reached depth 0\n  //  gameScore is Infinity cpu wins\n  //  gameScore is -Infinity player wins\n  //  there is no more space\n  if (\n    depth === 0 ||\n    score === gameScore ||\n    score === -gameScore ||\n    boardIsFull(gameGrid)\n  )\n    return [null, score];\n\n  // current best Column, Score\n  let max: [null | number, number] = [null, -Infinity];\n\n  //   For all possible moves\n  for (let column = 0; column < gameColumns; column++) {\n    let new_board = copyBoard(gameGrid); // Create new board\n    const row = findRowToLandCounter(new_board, column);\n    //  check if this place if empty\n    if (!new_board[row][column]) {\n      // plave counter in empty position\n      new_board[row][column] = 'yellow';\n\n      let next_move = minimizePlay(\n        new_board,\n        depth - 1,\n        gameScore,\n        alpha,\n        beta\n      ); // Recursive calling\n\n      // Evaluate new move\n      if (max[0] === null || next_move[1] > max[1]) {\n        max[0] = column;\n        max[1] = next_move[1];\n\n        alpha = next_move[1];\n      }\n      // @ts-ignore\n      if (alpha >= beta) return max;\n    }\n  }\n\n  return max;\n}\n\nexport function minimizePlay(\n  gameGrid: counter[][],\n  depth: number,\n  gameScore: number,\n  alpha?: number,\n  beta?: number\n): [null | number, number] {\n  let gameColumns = 7;\n  //  check current board score for cpu\n  const score = boardScore(gameGrid, gameScore);\n  // stop calculation if\n  // -we reached depth 0\n  //  gameScore is Infinity cpu wins\n  //  gameScore is -Infinity player wins\n  //  there is no more space\n  if (\n    depth === 0 ||\n    score === gameScore ||\n    score === -gameScore ||\n    boardIsFull(gameGrid)\n  )\n    return [null, score];\n  // current best Column, Score\n  let min: [null | number, number] = [null, Infinity];\n  //   For all possible moves\n  for (let column = 0; column < gameColumns; column++) {\n    // creating new board\n    let new_board = copyBoard(gameGrid);\n    // findig row to place counter\n    const row = findRowToLandCounter(new_board, column);\n    //  check if this place if empty\n    if (!new_board[row][column]) {\n      new_board[row][column] = 'red';\n\n      let next_move = maximizePlay(\n        new_board,\n        depth - 1,\n        gameScore,\n        alpha,\n        beta\n      );\n      // Evaluate new move\n      if (min[0] == null || next_move[1] < min[1]) {\n        min[0] = column;\n        min[1] = next_move[1];\n\n        beta = next_move[1];\n      }\n      // @ts-ignore\n      if (alpha >= beta) return min;\n    }\n  }\n\n  return min;\n}\n","import { expose } from 'comlink';\nimport { maximizePlay } from './aiMove';\n\nconst worker = {\n  maximizePlay,\n};\n\nexport type AiMoveWorker = typeof worker;\n\nexpose(worker);\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","_ref","serialized","Error","isError","message","name","stack","Object","assign","ep","arguments","length","undefined","globalThis","allowedOrigins","addEventListener","callback","ev","data","origin","allowedOrigin","RegExp","test","isAllowedOrigin","console","warn","concat","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","get","isProxyReleased","Proxy","_target","unregister","unregisterProxy","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","prototype","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","copyBoard","gameGrid","row","boardIsFull","i","scorePosition","column","deltaY","deltaX","gameScore","playerPoints","CPUPoints","boardScore","points","verticalPoints","horizontalPoints","diagonalPoints1","diagonalPoints2","gameRows","score","gameColumns","findRowToLandCounter","grid","maximizePlay","depth","alpha","beta","max","Infinity","new_board","next_move","minimizePlay","min"],"sourceRoot":""}